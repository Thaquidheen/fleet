# Company Service Configuration
server:
  port: 8083

spring:
  application:
    name: company-service

  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5433/company_service_db
    username: fleet_user
    password: fleet_password_2024
    driver-class-name: org.postgresql.Driver

  # JPA Configuration - SCHEMA MANAGED BY FLYWAY
  jpa:
    hibernate:
      ddl-auto: validate  # Only validate, never create/update schema
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        # CRITICAL: Add this for PostgreSQL enum support
        globally_quoted_identifiers: false
        # This helps with enum handling
        default_schema: public
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  # Flyway Configuration - MANAGES DATABASE SCHEMA
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 0
    validate-on-migrate: true
    clean-disabled: true  # Prevent accidental data loss

  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      password: "fleet_redis_2024"
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    consumer:
      group-id: company-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring:
          json:
            trusted:
              packages: "com.fleetmanagement.companyservice.dto"

# Security Configuration (Basic setup - update as needed)
security:
  jwt:
    secret: fleet-management-secret-key-for-jwt-token-signing-should-be-very-long-and-secure-and-is-at-least-64-bytes
    expiration: 86400000  # 24 hours
    issuer: fleet-management-system

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    enabled: true
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance-id:${random.value}}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    prefer-ip-address: true

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,flyway
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    db:
      enabled: true
    redis:
      enabled: true

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  show-actuator: true

# Application-specific Configuration
app:
  company:
    default-trial-days: 30
    max-trial-extensions: 2
    subscription:
      basic:
        max-users: 5
        max-vehicles: 10
      premium:
        max-users: 50
        max-vehicles: 100
      enterprise:
        max-users: 1000
        max-vehicles: 10000

# Logging Configuration
logging:
  level:
    com.fleetmanagement.companyservice: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/company-service.log

# Feign Configuration
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: basic
      user-service:
        connectTimeout: 3000
        readTimeout: 5000