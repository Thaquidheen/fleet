# Vehicle Service Configuration
spring:
  application:
    name: vehicle-service

  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5434/vehicle_service_db
    username: fleet_user
    password: fleet_password_2024
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 30000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        use_sql_comments: true
        jdbc:
          lob:
            non_contextual_creation: true
    show-sql: false

  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    schemas: public

  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      password: fleet_redis_2024
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: vehicle-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer

  # Security Configuration
  security:
    user:
      name: admin
      password: admin123

# Server Configuration
server:
  port: 8084
  servlet:
    context-path: /vehicle-service
  tomcat:
    max-threads: 200
    min-spare-threads: 10

# Service URLs for Feign clients


# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: localhost
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90

# Feign Configuration
feign:
  client:
    config:
      company-service:
        url: http://localhost:8082/company-service
        connect-timeout: 5000
        read-timeout: 10000
      user-service:
        url: http://localhost:8083/user-service
        connect-timeout: 5000
        read-timeout: 10000

# Cache Configuration
cache:
  redis:
    time-to-live:
      vehicle-details: 3600    # 1 hour
      vehicle-lists: 1800      # 30 minutes
      assignments: 900         # 15 minutes
      company-vehicles: 1800   # 30 minutes
      driver-assignments: 600  # 10 minutes
      fleet-analytics: 300     # 5 minutes

# JWT Configuration
jwt:
  secret: VehicleServiceSecretKey2024FleetManagement
  expiration: 86400000  # 24 hours
  refresh-expiration: 604800000  # 7 days

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Application Specific Configuration
app:
  services:
    user-service:
      url: http://localhost:8082
    company-service:
      url: http://localhost:8083

  # Cache configuration
  cache:
    vehicles:
      ttl: 300 # 5 minutes
    assignments:
      ttl: 180 # 3 minutes
    driver-assignments:
      ttl: 120 # 2 minutes
    vehicle-assignments:
      ttl: 120 # 2 minutes
  vehicle:
    default-page-size: 20
    max-page-size: 100
    bulk-operation-limit: 1000
    assignment:
      conflict-check-enabled: true
      history-retention-days: 365
    validation:
      vin-check-enabled: true
      license-plate-format-check: true

  subscription:
    vehicle-limit-check-enabled: true
    custom-vehicle-types-enabled: true

  integration:
    company-service:
      circuit-breaker:
        enabled: true
        failure-threshold: 5
        timeout: 3000
    user-service:
      circuit-breaker:
        enabled: true
        failure-threshold: 5
        timeout: 3000

# Logging Configuration
logging:
  level:
    com.fleetmanagement.vehicleservice: DEBUG
    org.springframework.security: DEBUG
    org.springframework.kafka: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Springdoc API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
  info:
    title: Vehicle Service API
    description: Fleet Management Vehicle Operations
    version: 1.0.0


  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics,prometheus
    endpoint:
      health:
        show-details: always
    metrics:
      export:
        prometheus:
          enabled: true
---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

logging:
  level:
    com.fleetmanagement.vehicleservice: DEBUG
    org.springframework.web: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    show-sql: false

  # Production Database
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5434/vehicle_service_db}
    username: ${DB_USERNAME:fleet_user}
    password: ${DB_PASSWORD:fleet_password_2024}

  # Production Redis
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:fleet_redis_2024}

  # Production Kafka
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

server:
  port: ${SERVER_PORT:8084}

# Production Eureka
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}

logging:
  level:
    com.fleetmanagement.vehicleservice: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN