# services/device-service/src/main/resources/application.yml
server:
  port: 8085

spring:
  application:
    name: device-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5435/device_service_db}
    username: ${DATABASE_USERNAME:fleet_user}
    password: ${DATABASE_PASSWORD:fleet_password_2024}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 600000
      connection-test-query: SELECT 1

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc.batch_size: 50
        order_inserts: true
        order_updates: true
        enable_lazy_load_no_trans: false

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    clean-disabled: true

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: 3
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5

  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        enable.idempotence: true
    consumer:
      group-id: device-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.fleetmanagement"

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:localhost}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: ${project.version:1.0.0}
      zone: ${eureka.instance.availability-zone:default}

# Traccar Integration Configuration
traccar:
  api:
    url: ${TRACCAR_API_URL:http://localhost:8089}
    username: ${TRACCAR_USERNAME:admin}
    password: ${TRACCAR_PASSWORD:admin}
    timeout: 30000
    connection-pool:
      max-total: 50
      max-per-route: 20
      connection-timeout: 10000
      socket-timeout: 30000
  sync:
    enabled: true
    retry-attempts: 3
    retry-delay: 5000
    batch-size: 100

# External Service URLs
external-services:
  company-service:
    url: ${COMPANY_SERVICE_URL:http://company-service:8083}
    timeout: 5000
  vehicle-service:
    url: ${VEHICLE_SERVICE_URL:http://vehicle-service:8084}
    timeout: 5000
  user-service:
    url: ${USER_SERVICE_URL:http://user-service:8082}
    timeout: 5000
  payment-service:
    url: ${PAYMENT_SERVICE_URL:http://payment-service:8092}
    timeout: 5000

# Device Configuration
device:
  registration:
    auto-create-in-traccar: true
    validate-imei: true
    check-duplicates: true
    default-update-interval: 30
  health:
    check-interval: 30000
    connection-timeout: 900 # 15 minutes
    alert-thresholds:
      gps-accuracy: 50 # meters
      battery-low: 20 # percentage
      signal-strength-low: 2 # out of 5
  commands:
    timeout: 30000
    retry-attempts: 3
    queue-size: 1000
    supported-commands:
      - positionSingle
      - engineStop
      - engineResume
      - alarmArm
      - alarmDisarm

# Mobile Device Configuration
mobile:
  tracking:
    default-update-interval: 30
    battery-optimization: true
    background-tracking: true
    privacy-mode-enabled: true
  features:
    photo-capture: true
    emergency-button: true
    driver-identification: true
  app:
    min-version: "1.0.0"
    force-update-version: "1.0.0"

# Kafka Topics
kafka:
  topics:
    device-registered: device.registered
    device-assigned: device.assigned
    device-health-updated: device.health.updated
    device-status-changed: device.status.changed
    sensor-subscription-changed: sensor.subscription.changed
    mobile-device-registered: mobile.device.registered
    device-command-sent: device.command.sent
    device-command-completed: device.command.completed

# Caching Configuration
cache:
  device-state:
    ttl: 300 # 5 minutes
  sensor-config:
    ttl: 1800 # 30 minutes
  traccar-devices:
    ttl: 600 # 10 minutes
  company-limits:
    ttl: 3600 # 1 hour

# Security Configuration
security:
  device-access:
    encryption-enabled: true
    signature-validation: true
  api:
    rate-limiting:
      enabled: true
      requests-per-minute: 1000
      burst-capacity: 100

# Monitoring and Logging
logging:
  level:
    com.fleetmanagement.deviceservice: DEBUG
    org.springframework.kafka: INFO
    org.hibernate.SQL: WARN
    org.springframework.web: INFO
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/device-service.log
    max-size: 100MB
    max-history: 30

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,kafka,flyway
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      service: device-service
      version: ${project.version:1.0.0}
      environment: ${spring.profiles.active}

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
  show-actuator: true
  packages-to-scan: com.fleetmanagement.deviceservice.controller

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://device-service-db:5432/device_service_db
  redis:
    host: redis
  kafka:
    bootstrap-servers: kafka:29092

traccar:
  api:
    url: http://traccar-server:8082

external-services:
  company-service:
    url: http://company-service:8083
  vehicle-service:
    url: http://vehicle-service:8084
  user-service:
    url: http://user-service:8082
  payment-service:
    url: http://payment-service:8092
