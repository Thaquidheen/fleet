# API Gateway Configuration
server:
  port: 8080

spring:
  application:
    name: api-gateway

  cloud:
    gateway:
      routes:
        # User Authentication Routes
        - id: user-auth-routes
          uri: lb://user-service
          predicates:
            - Path=/api/auth/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: Retry
              args:
                retries: 3
                methods: GET,POST
            - name: CircuitBreaker
              args:
                name: user-service-cb
                fallbackUri: forward:/fallback/auth

        # User Management Routes (with rate limiting)
        - id: user-management-routes
          uri: lb://user-service
          predicates:
            - Path=/api/users/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 150
                redis-rate-limiter.requestedTokens: 1

        # Company Management Routes
        - id: company-routes
          uri: lb://company-service
          predicates:
            - Path=/api/companies/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@companyKeyResolver}"
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100

        # Vehicle Management Routes
        - id: vehicle-routes
          uri: lb://vehicle-service
          predicates:
            - Path=/api/vehicles/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@companyKeyResolver}"
                redis-rate-limiter.replenishRate: 200
                redis-rate-limiter.burstCapacity: 300

        # Device Management Routes
        - id: device-routes
          uri: lb://device-service
          predicates:
            - Path=/api/devices/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@companyKeyResolver}"
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 150

        # Location Service Routes (High throughput)
        - id: location-routes
          uri: lb://location-service
          predicates:
            - Path=/api/locations/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@companyKeyResolver}"
                redis-rate-limiter.replenishRate: 500
                redis-rate-limiter.burstCapacity: 1000

        # Alert Service Routes
        - id: alert-routes
          uri: lb://alert-service
          predicates:
            - Path=/api/alerts/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200

        # Analytics Service Routes
        - id: analytics-routes
          uri: lb://analytics-service
          predicates:
            - Path=/api/analytics/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@companyKeyResolver}"
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100

        # Maintenance Service Routes
        - id: maintenance-routes
          uri: lb://maintenance-service
          predicates:
            - Path=/api/maintenance/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
            - AddRequestHeader=X-Gateway, fleet-management-gateway
            - AddResponseHeader=X-Response-Gateway, fleet-management
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@companyKeyResolver}"
                redis-rate-limiter.replenishRate: 30
                redis-rate-limiter.burstCapacity: 60

      # Global CORS Configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns:
              - "http://localhost:3000"
              - "http://localhost:3001"
              - "http://localhost:4200"
              - "https://*.fleetmanagement.com"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - PATCH
            allowedHeaders:
              - "*"
            allowCredentials: true
            maxAge: 3600

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    enabled: true  # Disable until Eureka server is running
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance-id:${random.value}}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    prefer-ip-address: true

# Redis Configuration for Rate Limiting
spring.data.redis:
  host: localhost
  port: 6379
  timeout: 2000ms
  password: "fleet_redis_2024"
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 0

# JWT Configuration
jwt:
  secret: fleet-management-secret-key-for-jwt-token-signing-should-be-very-long-and-secure-and-is-at-least-64-bytes
  expiration: 86400

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    prometheus:
      enabled: true
    health:
      enabled: true
    metrics:
      export:
        prometheus:
          enabled: true

# Logging Configuration
logging:
  level:
    com.fleetmanagement: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"