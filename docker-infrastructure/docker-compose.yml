version: '3.8'

networks:
  fleet-network:
    driver: bridge

volumes:
  # PostgreSQL Data Volumes
  user_service_db_data:
  company_service_db_data:
  vehicle_service_db_data:
  device_service_db_data:      # ✅ Added
  location_service_db_data:    # ✅ Added
  alert_service_db_data:
  maintenance_service_db_data:
  traccar_db_data:             # ✅ Correct
  traccar_logs:                # ✅ Correct

  # Other Data Volumes
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  clickhouse_data:

services:
  # ===============================
  # POSTGRESQL DATABASES
  # ===============================

  # User Service Database
  user-service-db:
    image: postgres:15-alpine
    container_name: user-service-db
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - user_service_db_data:/var/lib/postgresql/data
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d user_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Company Service Database
  company-service-db:
    image: postgres:15-alpine
    container_name: company-service-db
    environment:
      POSTGRES_DB: company_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - company_service_db_data:/var/lib/postgresql/data
      - ./init-scripts/company-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d company_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vehicle Service Database
  vehicle-service-db:
    image: postgres:15-alpine
    container_name: vehicle-service-db
    environment:
      POSTGRES_DB: vehicle_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5434:5432"
    volumes:
      - vehicle_service_db_data:/var/lib/postgresql/data
      - ./init-scripts/vehicle-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d vehicle_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ ADDED: Device Service Database
  device-service-db:
    image: postgres:15-alpine
    container_name: device-service-db
    environment:
      POSTGRES_DB: device_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5435:5432"
    volumes:
      - device_service_db_data:/var/lib/postgresql/data
      - ./init-scripts/device-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d device_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ ADDED: Location Service Database (TimescaleDB)
  location-service-db:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: location-service-db
    environment:
      POSTGRES_DB: location_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5436:5432"
    volumes:
      - location_service_db_data:/var/lib/postgresql/data
      - ./init-scripts/location-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d location_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traccar Database
  traccar-db:
    image: postgres:15-alpine
    container_name: traccar-db
    environment:
      POSTGRES_DB: traccar_db
      POSTGRES_USER: traccar
      POSTGRES_PASSWORD: traccar_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5439:5432"
    volumes:
      - traccar_db_data:/var/lib/postgresql/data
      - ./init-scripts/traccar-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traccar -d traccar_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alert Service Database
  alert-service-db:
    image: postgres:15-alpine
    container_name: alert-service-db
    environment:
      POSTGRES_DB: alert_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5437:5432"
    volumes:
      - alert_service_db_data:/var/lib/postgresql/data
      - ./init-scripts/alert-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d alert_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Maintenance Service Database
  maintenance-service-db:
    image: postgres:15-alpine
    container_name: maintenance-service-db
    environment:
      POSTGRES_DB: maintenance_service_db
      POSTGRES_USER: fleet_user
      POSTGRES_PASSWORD: fleet_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5438:5432"
    volumes:
      - maintenance_service_db_data:/var/lib/postgresql/data
      - ./init-scripts/maintenance-service-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleet_user -d maintenance_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # TRACCAR SYSTEM
  # ===============================

  # Traccar Server
  traccar-server:
    image: traccar/traccar:latest
    container_name: traccar-server
    depends_on:
      - traccar-db
    ports:
      - "8089:8082"    # Web interface
      - "5055:5055"    # Teltonika devices
      - "5013:5013"    # Queclink devices
      - "5001:5001"    # Concox devices
      - "5006:5006"    # Meitrack devices
      - "5023:5023"    # GT06/Mobile devices
    environment:
      - DATABASE_URL=jdbc:postgresql://traccar-db:5432/traccar_db
      - DATABASE_USER=traccar
      - DATABASE_PASSWORD=traccar_password_2024
    volumes:
      - ./traccar/traccar.xml:/opt/traccar/conf/traccar.xml:ro
      - traccar_logs:/opt/traccar/logs
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/server"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # EXISTING MICROSERVICES (ADD THESE)
  # ===============================

  # ✅ ADD: Eureka Server
  eureka-server:
    build:
      context: ./services/eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ ADD: API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ ADD: Company Service
  company-service:
    build:
      context: ./services/company-service
      dockerfile: Dockerfile
    container_name: company-service
    ports:
      - "8083:8083"
    depends_on:
      - company-service-db
      - eureka-server
      - kafka
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://company-service-db:5432/company_service_db
      - DATABASE_USERNAME=fleet_user
      - DATABASE_PASSWORD=fleet_password_2024
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fleet_redis_2024
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ ADD: User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8082:8082"
    depends_on:
      - user-service-db
      - eureka-server
      - kafka
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://user-service-db:5432/user_service_db
      - DATABASE_USERNAME=fleet_user
      - DATABASE_PASSWORD=fleet_password_2024
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fleet_redis_2024
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ ADD: Vehicle Service
  vehicle-service:
    build:
      context: ./services/vehicle-service
      dockerfile: Dockerfile
    container_name: vehicle-service
    ports:
      - "8084:8084"
    depends_on:
      - vehicle-service-db
      - eureka-server
      - kafka
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://vehicle-service-db:5432/vehicle_service_db
      - DATABASE_USERNAME=fleet_user
      - DATABASE_PASSWORD=fleet_password_2024
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fleet_redis_2024
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # PHASE 1 NEW SERVICES
  # ===============================

  # ✅ FIXED: Device Service (proper indentation)
  device-service:
    build:
      context: ./services/device-service
      dockerfile: Dockerfile
    container_name: device-service
    ports:
      - "8085:8085"
    depends_on:
      - device-service-db
      - eureka-server
      - kafka
      - redis
      - traccar-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://device-service-db:5432/device_service_db
      - DATABASE_USERNAME=fleet_user
      - DATABASE_PASSWORD=fleet_password_2024
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fleet_redis_2024
      - TRACCAR_API_URL=http://traccar-server:8082
      - TRACCAR_USERNAME=admin
      - TRACCAR_PASSWORD=admin
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ FIXED: Bridge Service (proper indentation)
  bridge-service:
    build:
      context: ./services/bridge-service
      dockerfile: Dockerfile
    container_name: bridge-service
    ports:
      - "8090:8090"
    depends_on:
      - eureka-server
      - kafka
      - redis
      - traccar-server
      - device-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fleet_redis_2024
      - TRACCAR_API_URL=http://traccar-server:8082
      - TRACCAR_USERNAME=admin
      - TRACCAR_PASSWORD=admin
      - DEVICE_SERVICE_URL=http://device-service:8085
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ FIXED: Location Service (proper indentation)
  location-service:
    build:
      context: ./services/location-service
      dockerfile: Dockerfile
    container_name: location-service
    ports:
      - "8086:8086"
    depends_on:
      - location-service-db
      - eureka-server
      - kafka
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://location-service-db:5432/location_service_db
      - DATABASE_USERNAME=fleet_user
      - DATABASE_PASSWORD=fleet_password_2024
      - EUREKA_CLIENT_SERVICE_URL=http://eureka-server:8761/eureka
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fleet_redis_2024
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # INFRASTRUCTURE SERVICES
  # ===============================

  # ClickHouse (Analytics Database)
  analytics-service-db:
    image: clickhouse/clickhouse-server:latest
    container_name: analytics-service-db
    environment:
      CLICKHOUSE_DB: analytics_service_db
      CLICKHOUSE_USER: fleet_user
      CLICKHOUSE_PASSWORD: fleet_password_2024
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fleet-redis
    command: redis-server --appendonly yes --requirepass fleet_redis_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fleet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: fleet-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - fleet-network
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fleet-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - fleet-network
    restart: unless-stopped

  # ===============================
  # MONITORING STACK
  # ===============================

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fleet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - fleet-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: fleet-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: fleet_grafana_2024
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - fleet-network
    restart: unless-stopped

  # ===============================
  # MANAGEMENT TOOLS
  # ===============================

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fleet-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fleetmanagement.com
      PGADMIN_DEFAULT_PASSWORD: fleet_pgadmin_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - user-service-db
      - company-service-db
      - vehicle-service-db
      - device-service-db
      - location-service-db
      - alert-service-db
      - maintenance-service-db
      - traccar-db
    networks:
      - fleet-network
    restart: unless-stopped

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fleet-kafka-ui
    ports:
      - "8070:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: fleet-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - fleet-network
    restart: unless-stopped

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fleet-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:fleet_redis_2024
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - fleet-network
    restart: unless-stopped